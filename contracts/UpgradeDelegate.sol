pragma solidity >=0.4.11 <0.5.0;

import "./helpers/openzeppelin-solidity/math/SafeMath.sol";
import "./StoppableShareable.sol";
import "./NumeraireShared.sol";


/// @title UpgradeDelegate
/// @notice Delegate contract used to execute final token upgrade
/// @dev This contract could optionally hardcode the address of the multisig
/// wallet before deployment - it is currently supplied as a function argument.
/// @dev Deployed at address
/// @dev Set in tx
/// @dev Retired in tx
contract UpgradeDelegate is StoppableShareable, NumeraireShared {

    address public delegateContract;
    bool public contractUpgradable;
    address[] public previousDelegates;

    string public standard;

    string public name;
    string public symbol;
    uint256 public decimals;

    event DelegateChanged(address oldAddress, address newAddress);

    using SafeMath for uint256;

    // set the address of the tournament contract as a constant.
    address private constant _TOURNAMENT = address(
        0x9DCe896DdC20BA883600176678cbEe2B8BA188A9
    );

    /// @dev Constructor called on deployment to initialize the delegate
    ///      contract multisig (even though it is an implementation contract,
    ///      just in case) and to confirm that the deployment address of the
    ///      contract matches the expected deployment address.
    /// @param _owners Array of owner address to control multisig
    /// @param _num_required Uint number of owners required for multisig transaction
    constructor(address[] _owners, uint256 _num_required) public StoppableShareable(_owners, _num_required) {
        require(
            address(this) == address(0x3361F79f0819fD5feaA37bea44C8a33d98b2A1cd),
            "incorrect deployment address - check submitting account & nonce."
        );
    }

    /// @dev Used to execute the token upgrade. The new tournament must first be
    //       initialized. Can only be called by the dedicated deployment address.
    /// @dev Executes the following steps:
    ///   1) Burn any NMR at the token contract's address and the null address.
    ///   2) Mint the remaining NMR supply to the designated multisig.
    ///   3) Transfer the remaining ETH balance to the designated multisig.
    ///   4) Clear the stake data, round data, and tournament data of tournament 0
    ///   5) Set new totalSupply and supply_cap values to 11 million NMR
    ///   6) Designate new delegate contract as NumeraireDelegateV3
    ///   7) Permanently disable freezing
    ///   8) Clear all existing owners
    function numeraiTransfer(address multiSig, uint256) public returns (bool ok) {
        // only the deployment address can call this function
        require(msg.sender == address(0x249e479b571Fea3DE01F186cF22383a79b21ca7F));

        // define the delegate address using the expected hardcoded address
        address delegateV3 = address(0x29F709e42C95C604BA76E73316d325077f8eB7b2);

        // zero out the NMR balance of the token contract and adjust totalSupply
        _burn(address(this), balanceOf[address(this)]);

        // zero out the NMR balance of the null address and adjust totalSupply
        _burn(address(0), balanceOf[address(0)]);

        // clear tournament 0 stakes (should cause totalSupply == sum(balances))
        uint8[87] memory roundIds = [
            uint8(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000003),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000003),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000003),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000003),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000003),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000006),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000007),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000008),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000009),
            uint8(0x000000000000000000000000000000000000000000000000000000000000000b),
            uint8(0x000000000000000000000000000000000000000000000000000000000000000c),
            uint8(0x000000000000000000000000000000000000000000000000000000000000000d),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000011),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000012),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000013),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000014),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000015),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000016),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000017),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000018),
            uint8(0x000000000000000000000000000000000000000000000000000000000000000e),
            uint8(0x000000000000000000000000000000000000000000000000000000000000000f),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000010),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000019),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001a),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001b),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001c),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001d),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000036),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000003),
            uint8(0x000000000000000000000000000000000000000000000000000000000000000a),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000003),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000003),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000011),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000012),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000013),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001e),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001f),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000020),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000021),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000022),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000023),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000024),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000025),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000014),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000015),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000016),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000017),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000018),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000019),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001a),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001b),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001c),
            uint8(0x000000000000000000000000000000000000000000000000000000000000001d),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000026),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000027),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000028),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000029),
            uint8(0x000000000000000000000000000000000000000000000000000000000000002a),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000035),
            uint8(0x000000000000000000000000000000000000000000000000000000000000002b),
            uint8(0x000000000000000000000000000000000000000000000000000000000000002c),
            uint8(0x000000000000000000000000000000000000000000000000000000000000002d),
            uint8(0x000000000000000000000000000000000000000000000000000000000000002e),
            uint8(0x000000000000000000000000000000000000000000000000000000000000002f),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000030),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000031),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000032),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000033),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000034),
            uint8(0x0000000000000000000000000000000000000000000000000000000000000005)
        ];
        address[87] memory stakers = [
            address(0x00000000000000000000000000000000000000000000000000000000000007e0),
            address(0x0000000000000000000000000000000000000000000000000000000000004c4c),
            address(0x00000000000000000000000000000000000000000000000000000000000007e0),
            address(0x00000000000000000000000000000000000000000000000000000000000007e0),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab4),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab4),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab4),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab9),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab9),
            address(0x0000000000000000000000000000000000000000000000000000000000004c4c),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab6),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab6),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab6),
            address(0x0000000000000000000000000000000000000000000000000000000000004c4c),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab9),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x000000000000000000000000000000000000000000000000000000000001cb71),
            address(0x0000000000000000000000004b3a0d73454b74172fe61b5a3eac2f34c0675546),
            address(0x0000000000000000000000004b3a0d73454b74172fe61b5a3eac2f34c0675546),
            address(0x0000000000000000000000004b3a0d73454b74172fe61b5a3eac2f34c0675546),
            address(0x00000000000000000000000000000000000000000000000000000000000010f2),
            address(0x0000000000000000000000000000000000000000000000000000000000005164),
            address(0x0000000000000000000000000000000000000000000000000000000000005164),
            address(0x0000000000000000000000000000000000000000000000000000000000005164),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab5),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab5),
            address(0x0000000000000000000000000000000000000000000000000000000000004ab5),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001f909),
            address(0x000000000000000000000000000000000000000000000000000000000001ee9d)
        ];
        bytes32[87] memory tags = [
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x616e736f6e616900000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x626c757500000000000000000000000000000000000000000000000000000000),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000)
        ];

        uint256 totalStakeAmount;
        for (uint256 i = 0; i < roundIds.length; i++) {
            uint256 roundID = uint256(roundIds[i]);
            uint256 stakeAmount = uint256(tournaments[0].rounds[roundID].stakes[stakers[i]][tags[i]].amount);
            totalStakeAmount = totalStakeAmount.add(stakeAmount);
            delete tournaments[0].rounds[roundID].stakes[stakers[i]][tags[i]];
        }

        // clear tournament 0 stakes
        totalSupply = totalSupply.sub(totalStakeAmount);

        // clear tournament 0 rounds
        for (uint256 j = 1; j <= 54; j++) {
            delete tournaments[0].rounds[j];
        }

        // clear tournament 0
        delete tournaments[0];

        // premine the difference between 11 million and totalSupply to multisig
        /* NOTE: Must be the final balance manipulation */
        supply_cap = 11e24;
        _mint(multiSig);
        totalSupply = supply_cap;

        // Set minting variables
        initial_disbursement = 11e24;
        weekly_disbursement = 0;
        total_minted = 11e24;

        // Set delegateV3
        previousDelegates.push(delegateContract);
        emit DelegateChanged(delegateContract, delegateV3);
        delegateContract = delegateV3;

        // Unfreeze and disable freezing
        stopped = false;
        stoppable = false;

        // Clear ownership - BE SURE THAT ownerIndex IS CLEARED PROPERLY!
        clearPending();
        for (uint256 z = 0; z < owners.length; z++) {
            if (owners[z] != address(0)) {
                delete ownerIndex[owners[z]];
                delete owners[z];
            }
        }
        delete ownerIndex[address(0)]; // just in case...

        // Double check all previous owners have been cleared
        address[28] memory previousOwners = [
            address(0x9608010323eD882a38eDe9211D7691102b4F0Ba0),
            address(0xb4207031Bb146E90CAb72230E0030823E02b923B),
            address(0x0387F0f731b518590433Cd0b37e5b3EB9d3aeF98),
            address(0x8ad69Ae99804935d56704162E3F6A6f442D2Ed4a),
            address(0x16e7115f6595668ca34F0CaE8E76196274c14FF7),
            address(0xdc6997b078C709327649443D0765BCAa8e37aA6C),
            address(0x257988B95EE87c30844aBEc7736Ff8a7D0bE2EB1),
            address(0x70153f8F89F6869037FBA270233409844F1F2E2e),
            address(0xaE0338Fefd533129694345659dA36C4fe144e350),
            address(0x444ab8aD5C74f82fada4765F4a4E595109903f11),
            address(0x54479Be2CA140163031eFec1b7608b9759eC897a),
            address(0x193B78eb3668982f17862181D083FF2e2A4DCc39),
            address(0x6833b2469e80ef0c72aa784e27b2666ab43568f5),
            address(0x1d68938194004722b814f00003d3eca19357344a),
            address(0x54479Be2CA140163031eFec1b7608b9759eC897a),
            address(0x9608010323eD882a38eDe9211D7691102b4F0Ba0),
            address(0x638141cfe7c64fe9a22400e7d9f682d5f7b3a99b),
            address(0x769c72349aa599e7f63102cd3e4576fd8f306697),
            address(0xe6a2be73d9f8eb7a56f27276e748b05f7d6d7500),
            address(0x707ad29e43f053d267854478642e278e78243666),
            address(0x193B78eb3668982f17862181D083FF2e2A4DCc39),
            address(0x6833b2469e80ef0c72aa784e27b2666ab43568f5),
            address(0x1d68938194004722b814f00003d3eca19357344a),
            address(0x22926dd58213ab6601addfa9083b3d01b9e20fe8),
            address(0x769c72349aa599e7f63102cd3e4576fd8f306697),
            address(0xe6a2be73d9f8eb7a56f27276e748b05f7d6d7500),
            address(0x638141cfe7c64fe9a22400e7d9f682d5f7b3a99b),
            address(0x707ad29e43f053d267854478642e278e78243666)
        ];
        for (uint256 y = 0; y < previousOwners.length; y++) {
            delete ownerIndex[previousOwners[y]];
        }

        // transfer all ETH on the token contract to multisig
        multiSig.transfer(address(this).balance);

        return true;
    }

    /// @dev Used for clearing active round data from the old tournament
    ///      contract. Can only be called by the new tournament address.
    function createRound(uint256 _tournamentID, uint256 _numRounds, uint256, uint256) public returns (bool ok) {
        // only the tournament can call this function.
        require(msg.sender == _TOURNAMENT);

        // validate number of rounds wont underflow
        require(_numRounds <= tournaments[_tournamentID].roundIDs.length);

        // iterate over each round and delete it.
        for (uint256 i = 1; i <= _numRounds; i++) {

            // get new array length reference
            uint256 newLength = tournaments[_tournamentID].roundIDs.length;

            // determine the last round ID.
            uint256 roundID = tournaments[_tournamentID].roundIDs[newLength - 1];

            // delete the round.
            delete tournaments[_tournamentID].rounds[roundID];

            // reduce the roundIDs array.
            tournaments[_tournamentID].roundIDs.length--;

        }

        return true;
    }

    /// @dev Used for clearing active stakes from the old tournament contract.
    ///      Can only be called by the new tournament address.
    function destroyStake(address _staker, bytes32 _tag, uint256 _tournamentID, uint256 _roundID) public returns (bool ok) {
        // only the tournament can call this function.
        require(msg.sender == _TOURNAMENT);
        delete tournaments[_tournamentID].rounds[_roundID].stakes[_staker][_tag];
        return true;
    }

    /// @dev Used to credit new tournament with active stake balances once
    ///      intialization is completed and before performing the upgrade.
    ///      Can only be called by the new tournament address.
    function withdraw(address, address, uint256 _stakeAmt) public returns (bool ok) {
        // only the tournament can call this function.
        require(msg.sender == _TOURNAMENT);
        // prevent from being called twice
        require(balanceOf[_TOURNAMENT] < _stakeAmt);
        balanceOf[_TOURNAMENT] = balanceOf[_TOURNAMENT].add(_stakeAmt);
        return true;
    }

    /// @dev Disabled function no longer used
    function mint(uint256) public pure returns (bool) {
        revert();
    }

    /// @dev Disabled function no longer used
    function releaseStake(address, bytes32, uint256, uint256, uint256, bool) public pure returns (bool) {
        revert();
    }

    /// @dev Disabled function no longer used
    function stake(uint256, bytes32, uint256, uint256, uint256) public pure returns (bool) {
        revert();
    }

    /// @dev Disabled function no longer used
    function stakeOnBehalf(address, uint256, bytes32, uint256, uint256, uint256) public pure returns (bool) {
        revert();
    }

    /// @dev Disabled function no longer used
    function createTournament(uint256) public pure returns (bool) {
        revert();
    }

    ////////////////////////
    // Internal Functions //
    ////////////////////////

    function _burn(address _account, uint256 _value) internal {
        totalSupply = totalSupply.sub(_value);
        balanceOf[_account] = balanceOf[_account].sub(_value);
        emit Transfer(_account, address(0), _value);
    }

    function _mint(address multiSig) internal {
        uint256 mintAmount = supply_cap.sub(totalSupply);
        balanceOf[multiSig] = balanceOf[multiSig].add(mintAmount);
        emit Transfer(address(0), multiSig, mintAmount);
    }
}
